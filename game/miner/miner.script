local grid = require "game.cave.grid"
local config = require "game.config"
go.property("action_speed", 0.1)
go.property("walk_cost",1)
go.property("dig_cost",3)

local STATE_IDLE = 1
local STATE_WALKING = 2
local STATE_DIGGING = 3
local state_strings = {"idle","walking","digging"}
local prio_weights = config.prio_weights

-- will prioritise resources and remember them (to pathfind back to them later on if needed)
-- otherwise big chance to carry on the same direction 
-- otherwise randomize route
local function choose_direction(self)
	local n = self.current_slot.neighbours
	
	-- add and remember all resources in neighbours
	for k,v in pairs(n) do
		if v.resources then
			-- put in top of queue 
			table.insert(self.known_resources, v)
		end
	end
	
	if #self.known_resources then
		-- do some pathfinding here on first in queue
	end
	
	
	
	-- IF NO KNOWN RESOURCES. MINE "AIMLESSLY"
	-- calculate all weights
	local full_weight = 0
	for k,v in pairs(n) do
		v.weight = 0
		if v.has_stone == true then 
			v.weight = prio_weights.stone 
		else
			v.weight = prio_weights.ground
		end
		-- prioritize last direction
		if self.direction == k then
			v.weight = v.weight + prio_weights.same_direction
			-- if he just digged, weight it even more.
			if self.state == STATE_DIGGING then
				v.weight = v.weight + prio_weights.same_direction * 4
			end
		end
		full_weight = full_weight + v.weight
	end
	
	-- randomize action
	local nr = math.random()*full_weight
	local full_weight = 0
	for k,v in pairs(n) do
		full_weight = full_weight + v.weight
		if nr <= full_weight then 
			return k,v
		end
	end
	print("error! should have found something:",full_weight)
end

local function remove_known_resource(slot)
	for i,v in ipairs(self.known_resources) do
		if v == slot then 
			table.remove(self.known_resources,i)
			return true
		end
	end
end

local function set_state(self, state)
	self.state = state
	if state == STATE_WALKING then
		self.action_steps = self.walk_cost
		local pos = vmath.vector3(self.target_slot.pos)
    	pos.z = 0.1
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, self.walk_cost*self.action_speed)
	elseif state == STATE_DIGGING then
		self.action_steps = self.dig_cost
	end
	--print("State:",state_strings[state], self.direction)
end

-- chooses action and adds to action_steps
local function next_action(self)
	local dir, slot = choose_direction(self)
	self.direction = dir
	self.target_slot = slot
	--print(dir, slot.grid_pos)
	if slot.has_stone then
		set_state(self,STATE_DIGGING)
	else
		set_state(self,STATE_WALKING)
	end
end

-- finalize what action started
local function finalize_action(self)
	if self.state == STATE_IDLE then
		-- did nothing.. do nothing.
	elseif self.state == STATE_WALKING then
		self.current_slot = self.target_slot
	elseif self.state == STATE_DIGGING then
		grid.set_stone(self.target_slot, false)
	end
end

local function reduce_action_step(self)
	self.action_steps = self.action_steps - 1
	if self.action_steps == 0 then
		finalize_action(self)
		next_action(self)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
    self.action = 0
    self.timer = 0
    self.action_steps = 1
    self.direction = nil
    self.known_resources = {}
    self.current_pos = vmath.vector3(math.ceil(math.random()*5)+50,math.ceil(math.random()*5)+50,0)
    self.current_slot = grid.grid[self.current_pos.x][self.current_pos.y]
    grid.set_stone(self.current_slot, false)
    self.target_slot = nil
    -- set go position
    local pos = vmath.vector3(self.current_slot.pos)
    pos.z = 0.1
    go.set_position(pos)
    print(pos)
end

function update(self, dt)
    self.timer = self.timer - dt
    while self.timer < 0 do
    	self.timer = self.timer + self.action_speed*1
    	reduce_action_step(self)
    end
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
    if action_id == hash("warp_time") and action.pressed then
    	self.timer = self.timer - 10 -- warp 1 min
    	while self.timer < 0 do
    		self.timer = self.timer + self.action_speed
    		reduce_action_step(self)
    	end
    end
end